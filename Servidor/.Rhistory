FuncionFinal_svm()
FuncionFinal_svm()
FuncionFinal_svm <- function(){
library(devtools)
library(NLP)
library(RJSONIO)
library(rPython)
require(rPython)
library(NLP)
library(tm)
library(ggplot2)
library(lattice)
library(caret)
python.load("D:/Proyecto tesis/SVM.py")
python.call("Stemmer_SVM")
data_original <- read.csv('D:/Proyecto tesis/Data/Data_Original.csv', sep = ';', header = T)
tweets <- read.csv('D:/Proyecto tesis/Data/Data_Stemmizada.csv', sep = ';', header = T)
tweets$Sentiment <- data_original$Sentiment
tweets$id <- data_original$id
colnames(tweets)[1] <- "text"
Algotirmo_svm(tweets = tweets)
}
Algotirmo_svm <- function(tweets) {
stopWords <- read.csv('data/lista de stopwords.csv', header = F)
corpus = Corpus(VectorSource(tweets$text))
corpus_low <- tm_map(corpus, content_transformer(tolower))
length(corpus)
corpus <- corpus_low
corpus <- tm_map(corpus, removeWords, stopWords[,1])
corpus <- tm_map(corpus, removePunctuation)
frequencies <-  DocumentTermMatrix(corpus)
findFreqTerms(frequencies, lowfreq = 600)
sparse <- removeSparseTerms(frequencies, 0.995)
tweetsSparse <- as.data.frame(as.matrix(sparse))
colnames(tweetsSparse) = make.names(colnames(tweetsSparse))
tweetsSparse$sentiment <- tweets$Sentiment
tweetsSparse$id <- tweets$id
library(caTools)
set.seed(12)
split <- sample.split(tweetsSparse$sentiment, SplitRatio = 0.8334027836)
trainSparse <- subset(tweetsSparse, split == TRUE)
testSparse <- subset(tweetsSparse, split == FALSE)
library(e1071)
SVM <- svm(as.factor(sentiment)~.,data=trainSparse)
predict_SVM <- predict(SVM, newdata = testSparse)
confusionMatrix(predict_SVM, testSparse$sentiment)
aux <- as.character(predict_SVM)
Listafinal_id <- vector('integer')
Listafinal_tweet <- vector('integer')
Listafinal_Sentimiento <- aux
Listafinal_id <- testSparse$id
data_original <- read.csv('D:/Proyecto tesis/data/Data_Original.csv', sep = ';', header = T)
for(i in 1:length(Listafinal_id)){
Listafinal_tweet[i] = as.character(data_original$Texto[i])
}
ListaFinal <- cbind(Listafinal_tweet,Listafinal_id, Listafinal_Sentimiento)
for(i in 1:length(Listafinal_id)){
print(data_original$Texto[i])
Listafinal_tweet[i] = as.character(data_original$Texto[i])
}
write.table(ListaFinal, file = "D:/Proyecto tesis/Data/Data_svm_id.csv", sep = ";", row.names=FALSE, col.names = F)
print('CSV CREADO, OK!!!')
}
FuncionFinal_svm()
runApp()
FuncionFinal_svm()
FuncionFinal_svm()
Algotirmo_svm <- function(tweets) {
stopWords <- read.csv('D:/Proyecto tesis/data/lista de stopwords.csv', header = F)
corpus = Corpus(VectorSource(tweets$text))
corpus_low <- tm_map(corpus, content_transformer(tolower))
length(corpus)
corpus <- corpus_low
corpus <- tm_map(corpus, removeWords, stopWords[,1])
corpus <- tm_map(corpus, removePunctuation)
frequencies <-  DocumentTermMatrix(corpus)
findFreqTerms(frequencies, lowfreq = 600)
sparse <- removeSparseTerms(frequencies, 0.995)
tweetsSparse <- as.data.frame(as.matrix(sparse))
colnames(tweetsSparse) = make.names(colnames(tweetsSparse))
tweetsSparse$sentiment <- tweets$Sentiment
tweetsSparse$id <- tweets$id
library(caTools)
set.seed(12)
split <- sample.split(tweetsSparse$sentiment, SplitRatio = 0.8334027836)
trainSparse <- subset(tweetsSparse, split == TRUE)
testSparse <- subset(tweetsSparse, split == FALSE)
library(e1071)
SVM <- svm(as.factor(sentiment)~.,data=trainSparse)
predict_SVM <- predict(SVM, newdata = testSparse)
confusionMatrix(predict_SVM, testSparse$sentiment)
aux <- as.character(predict_SVM)
Listafinal_id <- vector('integer')
Listafinal_tweet <- vector('integer')
Listafinal_Sentimiento <- aux
Listafinal_id <- testSparse$id
data_original <- read.csv('D:/Proyecto tesis/data/Data_Original.csv', sep = ';', header = T)
for(i in 1:length(Listafinal_id)){
Listafinal_tweet[i] = as.character(data_original$Texto[i])
}
ListaFinal <- cbind(Listafinal_tweet,Listafinal_id, Listafinal_Sentimiento)
for(i in 1:length(Listafinal_id)){
print(data_original$Texto[i])
Listafinal_tweet[i] = as.character(data_original$Texto[i])
}
write.table(ListaFinal, file = "D:/Proyecto tesis/Data/Data_svm_id.csv", sep = ";", row.names=FALSE, col.names = F)
print('CSV CREADO, OK!!!')
}
FuncionFinal_svm()
FuncionFinal_svm()
runApp()
FuncionFinal_KNN <- function(){
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
KNN_FUNCION()
}
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-8]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
runApp()
runApp()
KNN_FUNCION()
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-8]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
FuncionFinal_KNN <- function(){
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
KNN_FUNCION()
}
FuncionFinal_KNN
FuncionFinal_KNN()
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
python.call("Limpieza_KNN")
python.call("Limpieza_KNN")
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
FuncionFinal_KNN()
runApp()
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
runApp()
FuncionFinal_svm()
FuncionFinal_svm()
python.load("D:/Proyecto tesis/SVM.py")
python.call("Stemmer_SVM")
data_original <- read.csv('D:/Proyecto tesis/Data/Data_Original.csv', sep = ';', header = T)
tweets <- read.csv('D:/Proyecto tesis/Data/Data_Stemmizada.csv', sep = ';', header = T)
tweets$Sentiment <- data_original$Sentiment
data_original
tweets$Sentiment <- data_original$Sentiment
python.load("D:/Proyecto tesis/SVM.py")
python.call("Stemmer_SVM")
data_original <- read.csv('D:/Proyecto tesis/Data/Data_Original.csv', sep = ';', header = T)
tweets <- read.csv('D:/Proyecto tesis/Data/Data_Stemmizada.csv', sep = ';', header = T)
tweets$Sentiment <- data_original$Sentiment
python.load("D:/Proyecto tesis/SVM.py")
python.call("Stemmer_SVM")
data_original <- read.csv('D:/Proyecto tesis/Data/Data_Original.csv', sep = ';', header = T)
tweets <- read.csv('D:/Proyecto tesis/Data/Data_Stemmizada.csv', sep = ';', header = T)
tweets$Sentiment <- data_original$Sentiment
tweets$id <- data_original$id
colnames(tweets)[1] <- "text"
Algotirmo_svm(tweets = tweets)
FuncionFinal_KNN()
save.image("D:/Proyecto tesis/Servidor/Presentacion Final- Latam.RData")
save.image("D:/Proyecto tesis/Servidor/Presentacion Final- Latam.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
faithful
runApp()
runApp()
runApp()
runApp()
faithful
runApp()
x
faithful$waiting
bins
bins
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
runApp()
runApp()
inf_finak <- read.csv('D:/Proyecto tesis/Data/Informe_Final.csv', sep = ';', header = T)
runApp()
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("1", "2", "3", "4", "5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
FuncionFinal_KNN()
FuncionFinal_KNN <- function(x){
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
KNN_FUNCION()
}
python.load("D:/Proyecto tesis/KNN.py")
library(rPython)
library(RJSONIO)
library(rPython)
FuncionFinal_KNN <- function(x){
python.load("D:/Proyecto tesis/KNN.py")
python.call("Limpieza_KNN")
KNN_FUNCION()
}
FuncionFinal_KNN()
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("1","2","3","4","5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("1","2","3","4","5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("C_1","C_2","C_3","C_4","C_5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
KNN_FUNCION()
KNN_FUNCION <- function(){
data <- read.csv("D:/Proyecto tesis/data/data_knn.csv",header=T, sep =';',stringsAsFactors = FALSE)
stringsAsFactors = FALSE
str(data)
as.numeric(data$c1)
library(class)
data$clasificacion <- factor(data$CLUSTER, levels = c("C1", "C2", "C3", "C4", "C5"), labels = c("1","2","3","4","5"))
round(prop.table(table(data$Cluster)) * 100, digits = 1)
data_n <- as.data.frame(lapply(data[2:6], normalize))
summary(data_n$radius)
data_train <- data_n[1:1500,]
data_test <- data_n[1501:1998,]
data_train_labels <- data[1:1500, 6]
data_test_labels <- data[1501:1998, 6]
summary(data_n)
set.seed(123)
data_test_pred <- knn(train =data_train, test =  data_test, cl =  data_train_labels, k=3)
knn3 <- knn(train =data_train, test =  data_test,cl =  data_train_labels, k=3)
100 * sum(data_test_labels == knn3)/100
table(knn3, data_test_labels)
library(gmodels)
summary(data_test_pred)
CrossTable(x=data_test_labels, y= data_test_pred, prop.chisq = FALSE)
data_test_cluster = data[1501:1998,]
data_test_cluster = data_test_cluster[-2:-7]
write.table(data_test_cluster, file = "D:/Proyecto tesis/Data/Informe_Final.csv", sep = ";", row.names=FALSE)
print('CSV CREADO!!!!********************************')
}
KNN_FUNCION()
runApp()
input
faithful
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
